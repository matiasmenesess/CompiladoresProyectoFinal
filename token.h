#ifndef TOKEN_H
#define TOKEN_H

#include <string>
#include <iostream>

class Token {
public:
    enum Type {
        IDENTIFIER,INTEGER_CONSTANT,FLOATING_CONSTANT,CHARACTER_CONSTANT,STRING_LITERAL,PLUS,MINUS,MULTIPLY,DIVIDE,MODULO,ASSIGN,PLUS_ASSIGN,MINUS_ASSIGN,MULTIPLY_ASSIGN,DIVIDE_ASSIGN,MODULO_ASSIGN,LEFT_SHIFT_ASSIGN,RIGHT_SHIFT_ASSIGN,AND_ASSIGN,XOR_ASSIGN,OR_ASSIGN,LESS_THAN,GREATER_THAN,LESS_EQUAL,GREATER_EQUAL,EQUAL,NOT_EQUAL,LOGICAL_AND,LOGICAL_OR,LOGICAL_NOT,BITWISE_AND,BITWISE_OR,BITWISE_XOR,BITWISE_NOT,LEFT_SHIFT,RIGHT_SHIFT,INCREMENT,DECREMENT,DOT,ARROW,LEFT_PAREN,RIGHT_PAREN,LEFT_BRACE,RIGHT_BRACE,SEMICOLON,COMMA,COLON,QUESTION,VOID,CHAR,SHORT,INT,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,IF,ELSE,SWITCH,CASE,DEFAULT,WHILE,DO,FOR,GOTO,BREAK,CONTINUE,RETURN,STRUCT,UNION,CONST,VOLATILE,SIZEOF,INCLUDE,HEADER_NAME,ELLIPSIS,NEWLINE,WHITESPACE,COMMENT,END_OF_FILE,ERROR,UNKNOWN, VARARGS, INITIALIZER, CAST_EXPRESSION, POINTER_CONST, POINTER_VOLATILE, ABSTRACT_DECLARATOR,
    };

    Type type;
    std::string text;

    Token(Type type);
    Token(Type type, char c);
    Token(Type type, const std::string& source, int first, int last);

    friend std::ostream& operator<<(std::ostream& outs, const Token& tok);
    friend std::ostream& operator<<(std::ostream& outs, const Token* tok);
};

#endif // TOKEN_H
